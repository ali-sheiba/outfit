import { errorMessage } from 'utils/errors';

const initalState = {
  fetching: false,
  error: false,
  message: null,
  <%= resource_name.downcase %>: {},
  <%= resource_names.downcase %>: [],
  count: 0,
  options: {},
  deletingId: null,
};

const reducer = (state = initalState, { type, payload, meta }) => {
  switch (type) {
    case 'FETCH_<%= redux_actions %>_PENDING':
    case 'FETCH_<%= redux_actions %>_OPTIONS_PENDING':
      return {
        ...state,
        fetching: true,
      };
    case 'FETCH_<%= redux_actions %>_FULFILLED':
      return {
        ...state,
        fetching: false,
        <%= resource_names.downcase %>: payload.data.<%= resource_names.downcase %>,
        count: payload.data.pagination.total_entries,
      };
    case 'FETCH_<%= redux_actions %>_REJECTED':
    case 'DELETE_<%= redux_action %>_REJECTED':
    case 'FETCH_<%= redux_actions %>_OPTIONS_REJECTED':
      return {
        ...state,
        fetching: false,
        error: errorMessage(payload),
      };
    case 'FETCH_<%= redux_actions %>_OPTIONS_FULFILLED':
      return {
        ...state,
        fetching: false,
        options: {
          brands: payload.data.brands,
          colors: payload.data.colors,
          categories: payload.data.categories,
        },
      };
    case 'DELETE_<%= redux_action %>_PENDING':
      return {
        ...state,
        deletingId: meta.id,
      };
    case 'DELETE_<%= redux_action %>_FULFILLED':
      return {
        ...state,
        <%= resource_names.downcase %>: state.<%= resource_names.downcase %>.filter(i => i.id !== payload.data.id),
        count: state.count - 1,
        deletingId: null,
      };
    default:
      return state;
  }
};

export default reducer;
